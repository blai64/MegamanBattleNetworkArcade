#! /usr/bin/env python
'''
Example
'''


def Debug( msg ):
    print msg

DIRECTION_UP = 0
DIRECTION_DOWN = 1
DIRECTION_LEFT = 2
DIRECTION_RIGHT = 3

MEGAMAN_SPRITE_COLOR = (200,248,192)

D_WIDTH = 800
D_HEIGHT = 600

NUM_ROWS = 3
NUM_COLS = 6

class Event:
    """this is a superclass for any events that might be generated by an
    object and sent to the EventManager"""
    def __init__(self):
        self.name = "Generic Event"

class TickEvent(Event):
    def __init__(self):
        self.name = "CPU Tick Event"

class QuitEvent(Event):
    def __init__(self):
        self.name = "Program Quit Event"

class MapBuiltEvent(Event):
    def __init__(self, gameMap):
        self.name = "Map Finished Building Event"
        self.map = gameMap

class GameStartedEvent(Event):
    def __init__(self, game):
        self.name = "Game Started Event"
        self.game = game

class CharactorMoveRequest(Event):
    def __init__(self, direction):
        self.name = "Charactor Move Request"
        self.direction = direction

class CharactorPlaceEvent(Event):
    """this event occurs when a Charactor is *placed* in a sector,
    ie it doesn't move there from an adjacent sector."""
    def __init__(self, charactor):
        self.name = "Charactor Placement Event"
        self.charactor = charactor

class CharactorMoveEvent(Event):
    def __init__(self, charactor):
        self.name = "Charactor Move Event"
        self.charactor = charactor

class CharactorAttackRequest(Event):
    def __init__(self, attack):
        self.name = "Charactor Attack Request"
        self.attack = attack

class CharactorAttackEvent(Event):
    def __init__(self, charactor):
        self.name = "Charactor Attack Event"
        self.charactor = charactor

#------------------------------------------------------------------------------
class EventManager:
    """this object is responsible for coordinating most communication
    between the Model, View, and Controller."""
    def __init__(self):
        from weakref import WeakKeyDictionary
        self.listeners = WeakKeyDictionary()
        self.eventQueue= []

    #----------------------------------------------------------------------
    def RegisterListener( self, listener ):
        self.listeners[ listener ] = 1

    #----------------------------------------------------------------------
    def UnregisterListener( self, listener ):
        if listener in self.listeners:
            del self.listeners[ listener ]
        
    #----------------------------------------------------------------------
    def Post( self, event ):
        if not isinstance(event, TickEvent):
            Debug( "     Message: " + event.name )
        for listener in self.listeners:
            #NOTE: If the weakref has died, it will be 
            #automatically removed, so we don't have 
            #to worry about it.
            listener.Notify( event )

#------------------------------------------------------------------------------
class KeyboardController:
    """KeyboardController takes Pygame events generated by the
    keyboard and uses them to control the model, by sending Requests
    or to control the Pygame display directly, as with the QuitEvent
    """
    def __init__(self, evManager):
        self.evManager = evManager
        self.evManager.RegisterListener( self )

    #----------------------------------------------------------------------
    def Notify(self, event):
        if isinstance( event, TickEvent ):
            #Handle Input Events
            for event in pygame.event.get():
                ev = None
                if event.type == QUIT:
                    ev = QuitEvent()
                elif event.type == KEYDOWN \
                     and event.key == K_ESCAPE:
                    ev = QuitEvent()
                elif event.type == KEYDOWN \
                     and event.key == K_UP:
                    direction = DIRECTION_UP
                    ev = CharactorMoveRequest(direction)
                elif event.type == KEYDOWN \
                     and event.key == K_DOWN:
                    direction = DIRECTION_DOWN
                    ev = CharactorMoveRequest(direction)
                elif event.type == KEYDOWN \
                     and event.key == K_LEFT:
                    direction = DIRECTION_LEFT
                    ev = CharactorMoveRequest(direction)
                elif event.type == KEYDOWN \
                     and event.key == K_RIGHT:
                    direction = DIRECTION_RIGHT
                    ev = CharactorMoveRequest(direction)

                elif event.type == KEYDOWN \
                     and event.key == K_s:
                    attack = Attack(1)
                    ev = CharactorAttackRequest(attack)

                if ev:
                    self.evManager.Post( ev )


#------------------------------------------------------------------------------
class CPUSpinnerController:
    """..."""
    def __init__(self, evManager):
        self.evManager = evManager
        self.evManager.RegisterListener( self )

        self.keepGoing = 1

    #----------------------------------------------------------------------
    def Run(self):
        clock = pygame.time.Clock()
        while self.keepGoing:
            event = TickEvent()
            self.evManager.Post( event )
            clock.tick(50)

    #----------------------------------------------------------------------
    def Notify(self, event):
        if isinstance( event, QuitEvent ):
            #this will stop the while loop from running
            self.keepGoing = False


import pygame
from pygame.locals import *
import spritesheet
from spriteanimation import SpriteStripAnim



#------------------------------------------------------------------------------
class SectorSprite(pygame.sprite.Sprite):
    def __init__(self, sector, row, col, group=None):
        pygame.sprite.Sprite.__init__(self, group)

        ss = spritesheet.spritesheet('sprites/panels.png')
        # Sprite is 16x16 pixels at location 0,0 in the file...
        w,h = ss.get_dimensions()
        panel_w = w / NUM_COLS
        panel_h = h / NUM_ROWS
        self.image = ss.image_at((col*panel_w, row*panel_h, panel_w, panel_h))
        #self.image = ss.image_at((col * panel_w, row * panel_h , (col + 1) * panel_w, (row + 1) * panel_h))
        #self.image = pygame.image.load("ball.png")
        # self.image = pygame.Surface( (128,88) )
        # self.image.fill( (0,255,128) )

        self.sector = sector

#------------------------------------------------------------------------------
class CharactorSprite(pygame.sprite.Sprite):
    def __init__(self, group=None):
        pygame.sprite.Sprite.__init__(self, group)

        ss = spritesheet.spritesheet('sprites/move.png')
        w,h = ss.get_dimensions()

        charactorSurf = ss.image_at((0,0,w/4,h), MEGAMAN_SPRITE_COLOR)
        self.moveStrip = SpriteStripAnim('sprites/move.png', (0,0,w/4,h), 4, MEGAMAN_SPRITE_COLOR, True, 2)
        self.basicAttackStrip = SpriteStripAnim('sprites/basic_attack.png', (0,0,w/5,h), 5, MEGAMAN_SPRITE_COLOR, True, 2)
        # charactorSurf = pygame.Surface( (64,64) )
        # charactorSurf = charactorSurf.convert_alpha()
        # charactorSurf.fill((0,0,0,0)) #make transparent
        # pygame.draw.circle( charactorSurf, (255,0,0), (32,32), 32 )
        self.defImage = charactorSurf #keep track of default image to reset after movement
        self.image = charactorSurf
        self.rect  = charactorSurf.get_rect()

        self.actionFramesLeft = 0
        self.moveTo = None
        self.attack = None

    #----------------------------------------------------------------------
    def update(self):
        #movement updates
        if self.moveTo and (self.actionFramesLeft == 0):
            self.image = self.defImage
            self.rect.center = self.moveTo
            print self.moveStrip.i
            self.moveTo = None
        elif self.moveTo:
            self.image = self.moveStrip.next()
            self.actionFramesLeft -= 1

        #attack updates
        elif self.attack and (self.actionFramesLeft == 0):
            self.image = self.defImage
            print self.basicAttackStrip.i
            self.attack = None
        elif self.attack:
            self.image = self.basicAttackStrip.next()
            self.actionFramesLeft -= 1

#------------------------------------------------------------------------------
class EffectSprite(pygame.sprite.Sprite):
    def __init__(self, group=None):
        pygame.sprite.Sprite.__init__(self, group)
        ss = spritesheet.spritesheet('sprites/Swords_blade.png')

        w,h = ss.get_dimensions()
        effectSurf = ss.image_at((0,0,59,120),MEGAMAN_SPRITE_COLOR)

        self.swordEffectStrip = SpriteStripAnim('sprites/Swords_blade.png',(0,0,500/6,120),6,MEGAMAN_SPRITE_COLOR,True,2)
        w1 = 58
        w2 = 78
        w3 = 134
        w4 = 103
        w5 = 81
        w6 = 49
        rects = [(0,0,w1,90),(w1,0,w2,90), (w1+w2,0,w3,90),
                 (w1+w2+w3,0,w4,90),(w1+w2+w3+w4,0,w5,90),
                 (w1+w2+w3+w4+w5,0,w6,90)]
        self.swordEffectStrip.images = ss.images_at(rects,MEGAMAN_SPRITE_COLOR)
        #--------------------------------- CKwong's spritesheet
                
        # charactorSurf = pygame.Surface( (64,64) )
        # charactorSurf = charactorSurf.convert_alpha()
        # charactorSurf.fill((0,0,0,0)) #make transparent
        # pygame.draw.circle( charactorSurf, (255,0,0), (32,32), 32 )

        self.defImage = effectSurf #keep track of default image to reset after movement
        self.image = effectSurf
        self.rect  = effectSurf.get_rect()


        self.actionFramesLeft = 0
        self.extras = None #for overlaying sprites on top

    def update(self):
        #attack updates
        if self.extras and (self.actionFramesLeft == 0):
            self.extras = None
            #self.image = self.defImage
            self.kill()
            print "attack update"
            print (self.swordEffectStrip.i)
        elif self.extras:
            self.image = self.swordEffectStrip.next()
            self.actionFramesLeft -= 1
        
    

#------------------------------------------------------------------------------
class PygameView:
    def __init__(self, evManager):
        self.evManager = evManager
        self.evManager.RegisterListener( self )

        pygame.init()
        self.window = pygame.display.set_mode( (D_WIDTH,D_HEIGHT) )
        pygame.display.set_caption( 'Example Game' )
        self.background = pygame.Surface( self.window.get_size() )
        self.background.fill( (0,0,0) )
        font = pygame.font.Font(None, 30)
        text = """Press SPACE BAR to start"""
        textImg = font.render( text, 1, (255,0,0))
        self.background.blit( textImg, (0,0) )
        self.window.blit( self.background, (0,0) )
        pygame.display.flip()

        self.backSprites = pygame.sprite.RenderUpdates()
        self.frontSprites = pygame.sprite.RenderUpdates()


    #----------------------------------------------------------------------
    def ShowMap(self, gameMap):
        # clear the screen first
        self.background.fill( (0,0,0) )
        self.window.blit( self.background, (0,0) )
        pygame.display.flip()

        # use this squareRect as a cursor and go through the
        # columns and rows and assign the rect 
        # positions of the SectorSprites
        squareRect = pygame.Rect( (-128,D_HEIGHT/2, 128,128 ) )

        column = 0
        row = 0
        for sector in gameMap.sectors:
            if column < NUM_COLS:
                squareRect = squareRect.move( 128,0 )
            else:
                column = 0
                row += 1
                squareRect = squareRect.move( -(128*(NUM_COLS-1)), 100)
            newSprite = SectorSprite( sector, row, column,self.backSprites)
            newSprite.rect = squareRect
            column += 1
            newSprite = None

    #----------------------------------------------------------------------
    def ShowCharactor(self, charactor):
        sector = charactor.sector
        charactorSprite = CharactorSprite( self.frontSprites )
        sectorSprite = self.GetSectorSprite( sector )
        charactorSprite.rect.center = sectorSprite.rect.center

    #----------------------------------------------------------------------
    def MoveCharactor(self, charactor):
        charactorSprite = self.GetCharactorSprite( charactor )

        sector = charactor.sector
        sectorSprite = self.GetSectorSprite( sector )

        charactorSprite.actionFramesLeft = 8
        charactorSprite.moveTo = sectorSprite.rect.midtop


    #----------------------
    def PerformAttackCharactor(self, charactor):
        sector = charactor.sector
        
        
        charactorSprite = self.GetCharactorSprite(charactor)

        charactorSprite.attack = charactor.attack

        charactorSprite.actionFramesLeft = 12

        extraSprite = EffectSprite( self.extraSprites )
        sectorSprite = self.GetSectorSprite( sector )
        extraSprite.rect.center = sectorSprite.rect.midtop
        movingExtra = self.GetExtraSprite( extraSprite )
        movingExtra.extras = 1
        movingExtra.actionFramesLeft = 12

    #----------------------------------------------------------------------
    def GetCharactorSprite(self, charactor):
        #there will be only one
        for s in self.frontSprites:
            return s
        return None

    def GetExtraSprite(self, extra):
        for e in self.extraSprites:
            return e
        return None

    #----------------------------------------------------------------------
    def GetSectorSprite(self, sector):
        for s in self.backSprites:
            if hasattr(s, "sector") and s.sector == sector:
                return s


    #----------------------------------------------------------------------
    def Notify(self, event):
        if isinstance( event, TickEvent ):
            #Draw Everything
            self.backSprites.clear( self.window, self.background )
            self.frontSprites.clear( self.window, self.background )
            self.extraSprites.clear( self.window, self.background )

            self.backSprites.update()
            self.frontSprites.update()

            dirtyRects1 = self.backSprites.draw( self.window )
            dirtyRects2 = self.frontSprites.draw( self.window )
            
            dirtyRects = dirtyRects1 + dirtyRects2
            pygame.display.update( dirtyRects )


        elif isinstance( event, MapBuiltEvent ):
            gameMap = event.map
            self.ShowMap( gameMap )

        elif isinstance( event, CharactorPlaceEvent ):
            self.ShowCharactor( event.charactor )

        elif isinstance( event, CharactorMoveEvent ):
            self.MoveCharactor( event.charactor )

        elif isinstance( event, CharactorAttackEvent ):
            self.PerformAttackCharactor( event.charactor )


#------------------------------------------------------------------------------
class Game:
    """..."""

    STATE_PREPARING = 'preparing'
    STATE_RUNNING = 'running'
    STATE_PAUSED = 'paused'

    #----------------------------------------------------------------------
    def __init__(self, evManager):
        self.evManager = evManager
        self.evManager.RegisterListener( self )

        self.state = Game.STATE_PREPARING
        
        self.players = [ Player(evManager) ]
        self.map = Map( evManager )

    #----------------------------------------------------------------------
    def Start(self):
        self.map.Build()
        self.state = Game.STATE_RUNNING
        ev = GameStartedEvent( self )
        self.evManager.Post( ev )

    #----------------------------------------------------------------------
    def Notify(self, event):
        if isinstance( event, TickEvent ):
            if self.state == Game.STATE_PREPARING:
                self.Start()

#------------------------------------------------------------------------------
class Player(object):
    """..."""
    def __init__(self, evManager):
        self.evManager = evManager
        self.game = None
        self.name = ""
        self.evManager.RegisterListener( self )

        self.charactors = [ Charactor(evManager) ]

    #----------------------------------------------------------------------
    def __str__(self):
        return '<Player %s %s>' % (self.name, id(self))


    #----------------------------------------------------------------------
    def Notify(self, event):
        pass

#------------------------------------------------------------------------------
class Charactor:
    """..."""

    STATE_INACTIVE = 0
    STATE_ACTIVE = 1

    def __init__(self, evManager):
        self.evManager = evManager
        self.evManager.RegisterListener( self )

        self.sector = None
        self.attack = None
        self.state = Charactor.STATE_INACTIVE

    #----------------------------------------------------------------------
    def __str__(self):
        return '<Charactor %s>' % id(self)

    #----------------------------------------------------------------------
    def Move(self, direction):
        if self.state == Charactor.STATE_INACTIVE:
            return

        if self.sector.MovePossible( direction ):
            newSector = self.sector.neighbors[direction]
            self.sector = newSector
            ev = CharactorMoveEvent( self )
            self.evManager.Post( ev )

    #----------------------------------------------------------------------
    def Place(self, sector):
        self.sector = sector
        self.state = Charactor.STATE_ACTIVE

        ev = CharactorPlaceEvent( self )
        self.evManager.Post( ev )

    def PerformAttack(self,attack):
        if self.state == Charactor.STATE_INACTIVE:
            return
        # right now we dont care, just basic attack
        self.attack = attack
        ev = CharactorAttackEvent(self)
        self.evManager.Post(ev)

    #----------------------------------------------------------------------
    def Notify(self, event):
        if isinstance( event, GameStartedEvent ):
            gameMap = event.game.map
            self.Place( gameMap.sectors[gameMap.startSectorIndex] )

        elif isinstance( event, CharactorMoveRequest ):
            self.Move( event.direction )

        elif isinstance( event, CharactorAttackRequest ):
            self.PerformAttack( event.attack )

#------------------------------------------------------------------------------
class Map:
    """..."""

    STATE_PREPARING = 0
    STATE_BUILT = 1


    #----------------------------------------------------------------------
    def __init__(self, evManager):
        self.evManager = evManager
        #self.evManager.RegisterListener( self )

        self.state = Map.STATE_PREPARING

        self.sectors = []
        self.startSectorIndex = 0

    #----------------------------------------------------------------------
    def Build(self):
        for i in range(18):
            self.sectors.append( Sector(self.evManager) )

        #all cells except top row can go up
        for i in xrange(NUM_COLS, 3*NUM_COLS, 1):
            self.sectors[i].neighbors[DIRECTION_UP] = self.sectors[i-NUM_COLS]

        #all cells except bottom row can go down
        for i in xrange(0, 2*NUM_COLS, 1):
            self.sectors[i].neighbors[DIRECTION_DOWN] = self.sectors[i+NUM_COLS]


        # all can go left except leftmost column
        for i in xrange(1, NUM_COLS, 1):
            for j in xrange(0,NUM_ROWS,1):
                k = i + NUM_COLS*j
                self.sectors[k].neighbors[DIRECTION_LEFT] = self.sectors[k-1]    

        for i in xrange(0, NUM_COLS - 1, 1):
            for j in xrange(0,NUM_ROWS,1):
                k = i + NUM_COLS*j
                self.sectors[k].neighbors[DIRECTION_RIGHT] = self.sectors[k+1]   


        self.state = Map.STATE_BUILT

        ev = MapBuiltEvent( self )
        self.evManager.Post( ev )

#------------------------------------------------------------------------------
class Sector:
    """..."""
    def __init__(self, evManager):
        self.evManager = evManager
        #self.evManager.RegisterListener( self )

        self.neighbors = range(4)

        self.neighbors[DIRECTION_UP] = None
        self.neighbors[DIRECTION_DOWN] = None
        self.neighbors[DIRECTION_LEFT] = None
        self.neighbors[DIRECTION_RIGHT] = None

    #----------------------------------------------------------------------
    def MovePossible(self, direction):
        if self.neighbors[direction]:
            return 1

#-----------------------------------------------------------------------------
class Attack:
    def __init__(self, damage):
        self.damage = damage
        self.sector = None

    def invoke(sector):
        self.sector = sector




#------------------------------------------------------------------------------
def main():
    """..."""
    evManager = EventManager()

    keybd = KeyboardController( evManager )
    spinner = CPUSpinnerController( evManager )
    pygameView = PygameView( evManager )
    game = Game( evManager )
    
    spinner.Run()

if __name__ == "__main__":
    main()
